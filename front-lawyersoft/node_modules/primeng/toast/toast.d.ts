import { OnInit, AfterViewInit, AfterContentInit, OnDestroy, ElementRef, EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { Message } from 'primeng/api';
import { MessageService } from 'primeng/api';
import { Subscription } from 'rxjs';
import { AnimationEvent } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare class ToastItem implements AfterViewInit, OnDestroy {
    message: Message;
    index: number;
    template: TemplateRef<any>;
    showTransformOptions: string;
    hideTransformOptions: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onClose: EventEmitter<any>;
    containerViewChild: ElementRef;
    timeout: any;
    ngAfterViewInit(): void;
    initTimeout(): void;
    clearTimeout(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onCloseIconClick(event: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastItem>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastItem, "p-toastItem", never, {
    "message": "message";
    "index": "index";
    "template": "template";
    "showTransformOptions": "showTransformOptions";
    "hideTransformOptions": "hideTransformOptions";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
}, {
    "onClose": "onClose";
}, never>;
}
export declare class Toast implements OnInit, AfterContentInit, OnDestroy {
    messageService: MessageService;
    key: string;
    autoZIndex: boolean;
    baseZIndex: number;
    style: any;
    styleClass: string;
    position: string;
    modal: boolean;
    preventOpenDuplicates: boolean;
    preventDuplicates: boolean;
    showTransformOptions: string;
    hideTransformOptions: string;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onClose: EventEmitter<any>;
    containerViewChild: ElementRef;
    templates: QueryList<any>;
    messageSubscription: Subscription;
    clearSubscription: Subscription;
    messages: Message[];
    messagesArchieve: Message[];
    template: TemplateRef<any>;
    mask: HTMLDivElement;
    constructor(messageService: MessageService);
    ngOnInit(): void;
    add(messages: Message[]): void;
    canAdd(message: Message): boolean;
    containsMessage(collection: Message[], message: Message): boolean;
    ngAfterContentInit(): void;
    onMessageClose(event: any): void;
    enableModality(): void;
    disableModality(): void;
    onAnimationStart(event: AnimationEvent): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Toast>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Toast, "p-toast", never, {
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "position": "position";
    "preventOpenDuplicates": "preventOpenDuplicates";
    "preventDuplicates": "preventDuplicates";
    "showTransformOptions": "showTransformOptions";
    "hideTransformOptions": "hideTransformOptions";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "key": "key";
    "style": "style";
    "styleClass": "styleClass";
    "modal": "modal";
}, {
    "onClose": "onClose";
}, ["templates"]>;
}
export declare class ToastModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ToastModule, [typeof Toast, typeof ToastItem], [typeof ɵngcc1.CommonModule], [typeof Toast, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ToastModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuZC50cyIsInNvdXJjZXMiOlsidG9hc3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ0E7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0SXRlbSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgbWVzc2FnZTogTWVzc2FnZTtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNob3dUcmFuc2Zvcm1PcHRpb25zOiBzdHJpbmc7XG4gICAgaGlkZVRyYW5zZm9ybU9wdGlvbnM6IHN0cmluZztcbiAgICBzaG93VHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBoaWRlVHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250YWluZXJWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgdGltZW91dDogYW55O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIGluaXRUaW1lb3V0KCk6IHZvaWQ7XG4gICAgY2xlYXJUaW1lb3V0KCk6IHZvaWQ7XG4gICAgb25Nb3VzZUVudGVyKCk6IHZvaWQ7XG4gICAgb25Nb3VzZUxlYXZlKCk6IHZvaWQ7XG4gICAgb25DbG9zZUljb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3QgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlO1xuICAgIGtleTogc3RyaW5nO1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgbW9kYWw6IGJvb2xlYW47XG4gICAgcHJldmVudE9wZW5EdXBsaWNhdGVzOiBib29sZWFuO1xuICAgIHByZXZlbnREdXBsaWNhdGVzOiBib29sZWFuO1xuICAgIHNob3dUcmFuc2Zvcm1PcHRpb25zOiBzdHJpbmc7XG4gICAgaGlkZVRyYW5zZm9ybU9wdGlvbnM6IHN0cmluZztcbiAgICBzaG93VHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBoaWRlVHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250YWluZXJWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBtZXNzYWdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgY2xlYXJTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBtZXNzYWdlczogTWVzc2FnZVtdO1xuICAgIG1lc3NhZ2VzQXJjaGlldmU6IE1lc3NhZ2VbXTtcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBtYXNrOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgYWRkKG1lc3NhZ2VzOiBNZXNzYWdlW10pOiB2b2lkO1xuICAgIGNhbkFkZChtZXNzYWdlOiBNZXNzYWdlKTogYm9vbGVhbjtcbiAgICBjb250YWluc01lc3NhZ2UoY29sbGVjdGlvbjogTWVzc2FnZVtdLCBtZXNzYWdlOiBNZXNzYWdlKTogYm9vbGVhbjtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBvbk1lc3NhZ2VDbG9zZShldmVudDogYW55KTogdm9pZDtcbiAgICBlbmFibGVNb2RhbGl0eSgpOiB2b2lkO1xuICAgIGRpc2FibGVNb2RhbGl0eSgpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RNb2R1bGUge1xufVxuIl19